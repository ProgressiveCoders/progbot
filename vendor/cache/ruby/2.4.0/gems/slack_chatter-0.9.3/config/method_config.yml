api:
  test:
    args:
    options:
      error: string
      foo: string

auth:
  test:
    args:
      token: token

channels:
  archive:
    args:
      token: token
      channel: id
  create:
    args:
      token: token
      name: string
  history:
    args:
      token: token
      channel: id
    options:
      latest: epoch   # End of time range of messages to include in results
      oldest: epoch   # Start of time range of messages to include in results
      inclusive: bool # Include messages with latest or oldest timestamp in results (send 0/1)
      count: integer  # Number of messages to return, between 1 and 1000
  info:
    args:
      token: token
      channel: id
  invite:
    args:
      token: token
      channel: id
      user: id
  join:
    args:
      token: token
      name: string
  kick:
    args:
      token: token
      channel: id
      user: id
  leave:
    args:
      token: token
      channel: id
  list:
    args:
      token: token
    options:
      exclude_archived: bool
  mark:
    args:
      token: token
      channel: id
      ts: epoch
  rename:
    args:
      token: token
      channel: id
      name: string
  set_purpose:
    args:
      token: token
      channel: id
      purpose: string
  set_topic:
    args:
      token: token
      channel: id
      topic: string
  unarchive:
    args:
      token: token
      channel: id

chat:
  delete:
    args:
      token: token
      ts: epoch
      channel: id
  post_message:
    args:
      token: token
      channel: id
      text: string
    options:
      username: string
      as_user: bool
      parse: formatting
      link_names: formatting
      attachements: json_array
      unfurl_links: bool
      unfurl_media: bool
      icon_emoji: emoji_string
  update:
    args:
      token: token
      ts: epoch
      channel: id
      text: string

emoji:
  list:
    args:
      token: token

files:
  delete:
    args:
      token: token
      file: id
  info:
    args:
      token: token
      file: id
    options:
      count: integer
      page: integer
  list:
    args:
      token: token
    options:
      user: id
      ts_from: epoch
      ts_to: epoch
      types: {multi_choice: ["all", "posts", "snippets", "images", "gdocs", "zips", "pdfs"]}
      count: integer
      page: integer
  # upload:
  #   args:
  #     token: token
  #   options:
  #     file: file_contents
  #     content: file_contents
  #     filetype: string
  #     filename: string
  #     title: string
  #     initial_comment: string
  #     channels: id_list

groups:
  archive:
    args:
      token: token
      channel: id
  close:
    args:
      token: token
      channel: id
  create:
    args:
      token: token
      name: string
  create_child:
    args:
      token: token
      channel: id
  history:
    args:
      token: token
      channel: id
    options:
      latest: epoch   # End of time range of messages to include in results
      oldest: epoch   # Start of time range of messages to include in results
      inclusive: bool # Include messages with latest or oldest timestamp in results (send 0/1)
      count: integer  # Number of messages to return, between 1 and 1000
  info:
    args:
      token: token
      channel: id
  invite:
    args:
      token: token
      channel: id
      user: id
  kick:
    args:
      token: token
      channel: id
      user: id
  leave:
    args:
      token: token
      channel: id
  list:
    args:
      token: token
    options:
      exclude_archived: bool
  mark:
    args:
      token: token
      channel: id
      ts: epoch
  open:
    args:
      token: token
      channel: id
  rename:
    args:
      token: token
      channel: id
      name: string
  set_purpose:
    args:
      token: token
      channel: id
      purpose: string
  set_topic:
    args:
      token: token
      channel: id
      topic: string
  unarchive:
    args:
      token: token
      channel: id

im:
  close:
    args:
      token: token
      user: id
  history:
    args:
      token: token
      user: id
    options:
      latest: epoch   # End of time range of messages to include in results
      oldest: epoch   # Start of time range of messages to include in results
      inclusive: bool # Include messages with latest or oldest timestamp in results (send 0/1)
      count: integer  # Number of messages to return, between 1 and 1000
  list:
    args:
      token: token
  mark:
    args:
      token: token
      user: id
      ts: epoch
  open:
    args:
      token: token
      user: id

oauth:
  access:
    args:
      client_id: string
      client_secret: string
      code: string
    options:
      redirect_uri: url

# rtm:
#   start:
#     args:
#       token: token

search:
  all:
    args:
      token: token
      query: string
    options:
      sort: {choice: ["score", "timestamp"]}
      sort_dir: {choice: ["asc", "desc"]}
      highlight: {choice: ["1"]}
      count: integer
      page: integer
  files:
    args:
      token: token
      query: string
    options:
      sort: {choice: ["score", "timestamp"]}
      sort_dir: {choice: ["asc", "desc"]}
      highlight: {choice: ["1"]}
      count: integer
      page: integer
  messages:
    args:
      token: token
      query: string
    options:
      sort: {choice: ["score", "timestamp"]}
      sort_dir: {choice: ["asc", "desc"]}
      highlight: {choice: ["1"]}
      count: integer
      page: integer

stars:
  list:
    args:
      token: token
    options:
      user: id
      count: integer
      page: integer

team:
  access_logs:
    args:
      token: token
    options:
      count: integer
      page: integer
  info:
    args:
      token: token

users:
  get_presence:
    args:
      token: token
      user: id
  info:
    args:
      token: token
      user: id
  list:
    args:
      token: token
  set_active:
    args:
      token: token
  set_presence:
    args:
      token: token
      presence: {choice: ["auto","away"]}
